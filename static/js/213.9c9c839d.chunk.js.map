{"version":3,"file":"static/js/213.9c9c839d.chunk.js","mappings":"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","sources":["components/ArtistInfo/ArtistInfo.styled.js","components/ArtistInfo/ArtistInfo.jsx","pages/ArtistDetails.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ArtistInfoStyled = styled.div`\n  display: flex;\n  gap: 50px;\n\n  .artist-info {\n    width: 300px;\n  }\n  .artist-albums {\n    width: 100%;\n  }\n  .artist-subtitle {\n    text-align: center;\n    margin-bottom: 20px;\n    text-transform: uppercase;\n  }\n\n  .artist-discr {\n    font-size: 20px;\n    text-transform: capitalize;\n  }\n\n  .albums-list {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n  }\n  .album-item {\n    width: calc((100% - 30px) / 4);\n  }\n`;\n","import React from 'react';\nimport { ArtistInfoStyled } from './ArtistInfo.styled';\n\nconst ArtistInfo = ({ artist }) => {\n  const {\n    'life-span': { begin, ended },\n  } = artist;\n  if (artist.genres) {\n  }\n  const genre =\n    artist.genres.length > 0\n      ? artist.genres.reduce((prev, current) => {\n          if (current.name === 'rock' || current.name === 'metal') {\n            return prev;\n          }\n          return prev.count > current.count ? prev : current;\n        })\n      : 'Genre unknown';\n  const releases = artist['release-groups']\n    ? artist['release-groups'].filter(\n        release => release['secondary-types'].length === 0\n      )\n    : [];\n\n  return (\n    <>\n      <h2 className=\"page-title\">{artist.name}</h2>\n      <ArtistInfoStyled>\n        <div className=\"artist-info\">\n          <h3 className=\"artist-subtitle\">Artist info</h3>\n          {artist.name && <p className=\"artist-discr\">Name: {artist.name}</p>}\n          {artist.area ? (\n            <p className=\"artist-discr\">Country: {artist.area.name}</p>\n          ) : (\n            'Country unknown'\n          )}\n          <p className=\"artist-discr\">\n            Years: {begin ? begin : 'No date'}\n            {ended ? `- ${ended}` : begin ? ' - present days' : ''}\n          </p>\n          {genre && <p className=\"artist-discr\">Genre: {genre.name}</p>}\n        </div>\n        <div className=\"artist-albums\">\n          <h3 className=\"artist-subtitle\">Artist discography</h3>\n          {releases.length > 0 ? (\n            <ul className=\"albums-list\">\n              {releases.map(release => {\n                const cover = `http://coverartarchive.org/release-group/${release.id}/front-250`;\n                return (\n                  <li className=\"album-item\" key={release.id}>\n                    <img\n                      className=\"album-cover\"\n                      src={cover}\n                      alt={release.title}\n                      width=\"250\"\n                    />\n                    <p className=\"artist-discr\">{release.title}</p>\n                    <p className=\"artist-discr\">\n                      {release['first-release-date']}\n                    </p>\n                  </li>\n                );\n              })}\n            </ul>\n          ) : (\n            <p className=\"artist-discr\">No discography yet</p>\n          )}\n        </div>\n      </ArtistInfoStyled>\n    </>\n  );\n};\n\nexport default ArtistInfo;\n","import ArtistInfo from 'components/ArtistInfo/ArtistInfo';\nimport { Notify } from 'notiflix';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getArtistDetails } from 'services/api';\n\nconst ArtistDetails = () => {\n  const { artistId } = useParams();\n  const [artist, setArtist] = useState(null);\n\n  useEffect(() => {\n    const getArtist = async () => {\n      try {\n        const artistInfo = await getArtistDetails(artistId);\n        setArtist(artistInfo);\n      } catch (error) {\n        Notify.failure(error.message);\n      }\n    };\n    getArtist();\n  }, [artistId]);\n\n  return <>{artist && <ArtistInfo artist={artist} />}</>;\n};\n\nexport default ArtistDetails;\n","import { Notify } from 'notiflix';\nimport axios from 'axios';\n\nexport const getArtistName = async query => {\n  try {\n    const { data } = await axios.get(\n      `http://musicbrainz.org/ws/2/artist/?query=artist:${query}%20AND%20tag:metal&fmt=json`\n    );\n    return data;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport const getArtistDetails = async artistId => {\n  try {\n    const { data } = await axios.get(\n      `http://musicbrainz.org/ws/2/artist/${artistId}?inc=genres+release-groups&fmt=json`\n    );\n    console.log(data);\n    return data;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport const getNearestRealeases = async () => {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth().toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  const today = `${year}-${month}-${day}`;\n\n  try {\n    const { data } = await axios.get(\n      `http://musicbrainz.org/ws/2/release-group/?query=tag:(\"power metal\"+OR+\"heavy metal\")%20AND%20primarytype:album%20AND%20firstreleasedate:[${today} TO *]&fmt=json`\n    );\n    console.log('api: ', data);\n    return data;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n"],"names":["ArtistInfoStyled","styled","_templateObject","_taggedTemplateLiteral","_ref","artist","_artist$lifeSpan","begin","ended","genres","genre","length","reduce","prev","current","name","count","releases","filter","release","_jsxs","_Fragment","children","_jsx","className","area","concat","map","cover","id","src","alt","title","width","artistId","useParams","_useState","useState","_useState2","_slicedToArray","setArtist","useEffect","getArtist","_asyncToGenerator","_regeneratorRuntime","mark","_callee","artistInfo","wrap","_context","next","getArtistDetails","sent","t0","Notify","message","stop","apply","arguments","ArtistInfo","getArtistName","query","_yield$axios$get","data","axios","abrupt","_x","_ref2","_callee2","_yield$axios$get2","_context2","console","log","_x2","getNearestRealeases","_ref3","_callee3","date","year","month","day","today","_yield$axios$get3","_context3","Date","getFullYear","getMonth","toString","padStart","getDate"],"sourceRoot":""}